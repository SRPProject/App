
Further implementation:
jwt ,discuss how to implement  three roles  and to verify request to  manage db
Need to update student schema + need to check roll and mail already exists in collection
during student login if the password is empty should not send the otp | show alert msg for setting the password by using mail link (dont show wrong passsword) 


// const mongoose =  require('mongoose');
// const Schema = mongoose.Schema;

// //need to change to relational db // sequelize
// const admindataSchema=new Schema({
//     mail:String,
//     password:String,
//     otp:String,
// })


// const studentSchema=new Schema({
//     mail:String,
//     password:String,
//     rollnumber:String,
//     otp:String,
// })
// const Admindata=mongoose.model("a",admindataSchema,"admindata");
// const StudentData=mongoose.model("b",admindataSchema,"studentsdata");
// module.exports={Admindata,StudentData};


// const { Sequelize, Model, DataTypes } = require("sequelize");
// const sequelize = new Sequelize("sqlite::memory:");


// const Department=sequelize.define("department",{
//     dept_id:{
//         type:Sequelize.INTEGER,
//         primaryKey:true
//     },
//     dept_name:{
//         type:DataTypes.TEXT,
//         allowNull: false,
//     },
//     dept_code:{
//         type:DataTypes.STRING,
//         allowNull:false,
//     },
    // indexes:[
    //     {
    //         fields: ['dept_id'],
    //         using: 'gin',
    //         operator: 'jsonb_path_ops'
    //     },
    // ]
// })
// 'use strict';

// const Admin=(sequelize, DataTypes) => {
//   class Admin extends Model {
//     /**
//      * Helper method for defining associations.
//      * This method is not a part of Sequelize lifecycle.
//      * The `models/index` file will call this method automatically.
//      */
//     static associate(models) {
//       // define association here
//     }
//   }
//   Admin.init({
//     admin_id : {
//         type: Sequelize.INTEGER,
//         autoIncrement: true,
//         primaryKey: true
//       },
//     email:{
//         allowNull:false,
//         unique:true,
//         type:DataTypes.STRING,
//         validate:{isEmail:true}
//     },
//     password:{
//         allowNull:false,
//         type:DataTypes.TEXT,
//     }},  
//     {
//         sequelize,
//         modelName: 'Admin',
//     });
//   return Admin;
// };

// const authlogin=async(req,res)=>{
//     try{
//         const mailid=req.body.mail;
//         const paswd=req.body.password;
//         var obj= await Admindata.findOne({mail:mailid})
//         if(obj){
//             const usrpswd=obj.password; 

            
//         }
//         else{
//             return res.status(404).json({message:"admin id doesn't exist"});
//         }
//     }
//     catch(err){
//         console.log(err);
//         return res.status(500).json({message:"admin login - error"});

//     }
// }
// const authotp=async (req,res)=>{
//     try{
//         var otp = Math.random();
//         otp = otp * 1000000;
//         otp = parseInt(otp);
//         console.log(otp);
//         rpmail=req.body.mail;

//         var mailOptions={
//             to: rpmail,
//             subject: "Otp for registration is: ",
//             html: "<h3>OTP for account verification is </h3>"  + "<h1 style='font-weight:bold;'>" + otp +"</h1>" // html body
//         };

//         transporter.sendMail(mailOptions,async (error, info) => {
//             if (error) {
//                 //  console.log(error);
//                  return res.status(404).json({message:"Error in sending mail"});
//             }
//             else{
//                 var setotp={$set: {otp:otp}}
//                 var obj=await Admindata.updateOne({mail:rpmail},setotp,(err,result)=>{
//                     if(err){
//                         // console.log(err);
//                         return res.status(500).json({message:"error in updating otp to db!"});
//                     }
                    
//                 })
//             }
//             console.log('Message sent: %s', info.messageId);   
//             console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
//         });
//         return res.status(200).json({message:"otp sent successfully!"});
//     }
//     catch(err){
//         console.log(err);
//         return res.status(500).json({message:"authotp - error"});

//     }
// }
// const authverifyotp=async (req,res)=>{
//     try{
//         var obj=await Admindata.findOne({mail:req.body.mail});
//         console.log(obj.otp);
//         if(obj.otp===req.body.otp){
//             return res.status(200).json({message:"otp verification successful!"});
//         }else{
//             return res.status(400).json({message:"Invalid otp"});

//         }
//     }
//     catch(err){
//         return res.json({message:"Verifying otp - error"});
//     }
// }
// const createnewstudent=async(req,res)=>{
//     try{
//         var std_mail=req.body.std_mail;
//         var std_roll=req.body.std_roll;

//         //need more personal details  + check for unique mail and roll
//         var obj=await StudentData.create({mail:std_mail,rollnumber:std_roll});

//         var gobj=await StudentData.findOne({mail:std_mail});
//         var set_link="localhost:3000/student/id:"+gobj._id;
//         var mailOptions={
//             to: std_mail,
//             subject: "Account for student registration is: ",
//             html: "<h3>Link for student account registration is </h3>"  + "<a style='font-weight:bold;'>" + set_link +"</a>" // html body
//         };
//         transporter.sendMail(mailOptions,async (error, info) => {
//             if (error) {
//                  console.log(error);
//                  return res.status(404).json({message:"Error in sending mail"});
//             }

//             // console.log('Message sent: %s', info.messageId);   
//             // console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
//         });
//         return res.status(200).json({message:"Student account setup link sent successfully!"});
//     }
//     catch(err){
//         return res.json({message:"New user creation - error!"});
//     }
// }
// // get rollnumber,mailid
// // create new document for user
// // get the id
// // send the link to the user mail

// // /user/auth:uid
// // findby uid
// // get pswd  and confirmed password
// // if both are same
// // update to db
