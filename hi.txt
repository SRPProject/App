1 HS5151 Technical English HSMC 4 0 0 4 4 
2 MA5158 Engineering Mathematics I BSC 3 1 0 4 4 
3 PH5151 Engineering Physics BSC 3 0 0 3 3 
4 CY5151 Engineering Chemistry BSC 3 0 0 3 3 
5 GE5153 Problem Solving and Python Programming ESC 3 0 0 3 3
6 BS5161 Basic Sciences Laboratory BSC 0 0 4 4 2 
7 GE5161 Problem Solving and Python Programming Laboratory ESC 0 0 4 4 2


1 HS5251 Professional Communication HSMC 4 0 0 4 4 
2 MA5252 Engineering Mathematics II BSC 3 1 0 4 4 
3 IT5201 Information Technology Essentials ESC 3 0 0 3 3 
4 EE5251 Basics of Electrical and Electronics Engineering ESC 3 0 0 3 3
5 GE5151 Engineering Graphics ESC 1 0 4 5 3 PRACTICALS 
6 IT5211 Information Technology Essentials Laboratory ESC 0 0 4 4 2 
7 EE5261 Electrical and Electronics Engineering Laboratory ESC 0 0 4 4 2


1 MA5302 Discrete Mathematics BSC 3 1 0 4 4 
2 IT5301 Digital Logic and Design ESC 2 0 2 4 3 
3 IT5352 Programming and Data Structures PCC 3 0 0 3 3 
4 IT5351 Database Management Systems PCC 3 0 0 3 3 
5 IT5302 Software Engineering PCC 3 0 0 3 3 


6 IT5311 Programming and Data Structures Laboratory PCC 0 0 4 4 2 
7 IT5312 Database Management Systems Laboratory PCC 0 0 4 4 2

[
["HS5151" ,"Technical English",4, 1],
["MA5158" ,"Engineering Mathematics",4 ,1],
["PH5151","Engineering Physics",3,1],
["CY5151","Engineering Chemistry",3,1],
["GE5153","Problem Solving and Python Programming",3,1],

["BS5161","Basic Sciences Laboratory",2,1],
["GE5161","Problem Solving and Python Programming Laboratory",2,1],


["HS5251","Professional Communication",4,2],
["MA5252","Engineering Mathematics II",4,2],
["IT5201","Information Technology Essentials",3,2],
["EE5251","Basics of Electrical and Electronics Engineering",3,2],
["GE5151","Engineering Graphics",3,2],

["IT5211","Information Technology Essentials Laboratory",2,2],
["EE5261","Electrical and Electronics Engineering Laboratory",2,2],


["MA5302","Discrete Mathematics",4,3],
["IT5301","Digital Logic and Design",3,3],
["IT5352","Programming and Data Structures",3,3],
["IT5351","Database Management Systems",3,3],
["IT5302","Software Engineering",3,3],

["IT5311","Programming and Data Structures Laboratory",2,3],
["IT5312","Database Management Systems Laboratory",2,3]
]


account creation 
get 

mail 

distDepartmentDeptid
batchId
degreeDegid
regulationRegid


personal details

regnum
sex
firstname
lastname
dob

studentsem add subjects
with regid deptid degid

Verification table create entry for linkcode for email
send mail with account creation

then return response

hi 


code for blob upload:
const { BlobServiceClient } = require("@azure/storage-blob");
const multer=require("multer");
const AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;

if (!AZURE_STORAGE_CONNECTION_STRING) {
  logger.error('Azure Storage Connection string not found');
}

// Create the BlobServiceClient object with connection string
const blobServiceClient = BlobServiceClient.fromConnectionString(AZURE_STORAGE_CONNECTION_STRING);

// Create a unique name for the container

const containerName = 'quickstart';
// Get a reference to a container
const containerClient = blobServiceClient.getContainerClient(containerName);
// Create the container
const  createContainer= async()=>{ 
  try{
    createContainerResponse=await containerClient.create();
    logger.info(
      'Container was created successfully')
  }
  catch(err){
    logger.error(err);
  }
}

const deleteContainer = async () => {
  try {
      logger.info(`Deleting container "${containerName}"...`);
      await containerClient.delete();
      logger.info(`Done.`);
  } catch (error) {
      logger.info(error.message);
  }
};



app.post("/createcon",(req,res)=>{
  try{
     createContainer();
     return  res.status(200).send({msg:"success"});
  }
  catch(err){
    return  res.status(500).send({msg:"failure"});
  }
})

const upload=multer({storage:multer.memoryStorage({})});


app.post("/uploadblob",upload.single('fileme'),async(req,res)=>{
  try{
    // Create a unique name for the blob
      // const blobName = req.file.buffer;
      // logger.info(blobName);
      console.log(req.file)

      // Create a unique name for the blob
      const blobName = req.file.path;
      console.log(blobName);

      // Get a block blob client
      const blockBlobClient = containerClient.getBlockBlobClient(blobName);

      // Display blob name and url

      console.log(blockBlobClient);

      // Upload data to the blob
      const data = req.file.buffer;
      const uploadBlobResponse = await blockBlobClient.upload(data, data.length);
      console.log(
        `Blob was uploaded successfully. requestId: ${uploadBlobResponse.requestId}`
      );
    return res.status(200).send({msg:'suc'})
  }
  catch(err){
    return res.status(500).send({msg:err})
  }
})
async function streamToText(readable) {
  readable.setEncoding('utf8');
  let data = '';
  for await (const chunk of readable) {
    data += chunk;
  }
  return data;
}

app.post("/getblob",async(req,res)=>{
  try {
    console.log(req.body.blobname);
    const containerClient = blobServiceClient.getContainerClient(containerName);
    const blobClient = containerClient.getBlobClient(req.body.blobname);
    const downloadBlockBlobResponse = await blobClient.download();
    const downloaded = (
      await streamToText(downloadBlockBlobResponse.readableStreamBody)
    ).toString();
    return res.status(200).send({msg:downloaded});
  } catch (err){
    console.log(err);
    return res.status(500).send({msg:err})
  }
})



